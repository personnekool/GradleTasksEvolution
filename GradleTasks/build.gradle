plugins {
    id 'java'
}

group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}
/**
 * Solution exercise 12
 *
 * Methods define the action and order of tasks execution. This is crucial for
 * Gradle. In the App when you see Action think in terms of closures. Action is
 * a Interface used in Java.
 *
 * layout.projectDirectory = root of gradle project (where build.gradle is located)
 * layout.buildDirectory = build folder inside gradle root project
 *
 * IMPORTANT
 * Each plugin will add new properties and tasks. See properties and tasks
 * for application, eclipse and org.jetbrains.intellij plugins in Gradle Documentation
 * and IntelliJ IDEA web page.
 */

tasks.register('backupFolder',Copy){
    // Print both to see the difference
    println "projectDirectory: ${layout.projectDirectory}"
    println "buildDirectory: ${layout.buildDirectory}"
    // Copy operation
    from(layout.projectDirectory.dir('./src/main/java'))
    into(layout.projectDirectory.dir('./backup_folder'))
}
/* Define for Java only
 * - java source folder (not files) location
 * - java folder destination of .class files after compilation
*/
sourceSets {
    main{
        java{
            srcDirs = ["$projectDir/backup_folder"]
        }
        output.resourcesDir = file('./backup_folder/classes')
    }
}

tasks.register('compileBackup', JavaCompile){
    source = sourceSets.main.java.srcDirs
    include('org/example/*.java')
    classpath = sourceSets.main.compileClasspath
    setDestinationDirectory(sourceSets.main.output.resourcesDir)
}
